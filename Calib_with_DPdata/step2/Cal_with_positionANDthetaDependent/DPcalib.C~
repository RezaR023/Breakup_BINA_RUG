#define DPcalib_cxx
#include "DPcalib.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <TF1.h>
#include <TPostScript.h>
#include <TMath.h>
#include "TCutG.h"
#include "TGraph.h"
#include "TGraphErrors.h"

#define psfile0 "config0fn.ps"
TCanvas *cc;
TH2D *hx[10];
TH2D *he[10];
TH2D *hteta[10];
TH2D *htes[10];
TH1D *test;// = new TH1D("test","",1900,0,1900);
char nam[10][350], nam1[10][350],namgP[10][350], nam2[10][350],namt[10][350];
#define outf1 "outf11.dat"
TFile *f1=new TFile("../../vvbreakDP.root");
int cnl=0,ll=0,llg=0;
double S1[50000],SYY[100000],SY[50000],S2[50000],S11[100000],S22[100000],Stt[100000],St[50000];
double parr0[10],parr1[10],parr2[10],parr3[10],parr4[10],parr5[10],parr6[10];
double bm,BC,Ref,EFW0;
TF1 *ftta;
TF1 *fx[10];
TF1 *ffga;
TF1 *fitfuncp;
TF1 *finalfuncp;
TF1 *finalfuncpx;
TGraph *gainP[10];
double FITFU(double detN, double thta,double adcL, double adcR);
double FITFUX(double detN, double X,double adcL, double adcR);
void DPcalib::Loop()
{
  using namespace std;
  TFile *f = new TFile("vbreakDPn.root","recreate");
  TPostScript *ps = new TPostScript(psfile0,111);
  // TPostScript *ps1 = new TPostScript(psfile1,111);
  cc=new TCanvas("cc","");
  ftta = new TF1("ftta","pol5",0,90);
  ftta->SetParameters(115.901,0.0280072,-0.0396593,5.70385e-05,4.48284e-06,-2.25287e-08);

  fx[0] = new TF1("fx0","pol5",-110,110);
  fx[0]->SetParameters(87.9084,0.00141299,-0.00329838,-4.86274e-07,8.07931e-08,3.95097e-11);
  fx[1] = new TF1("fx1","pol5",-110,110);
  fx[1]->SetParameters(98.217,0.00132721,-0.00405062,-4.88131e-07,1.03078e-07,3.88546e-11);
  fx[2] = new TF1("fx2","pol5",-110,110);
  fx[2]->SetParameters(106.549,0.000512904,-0.00476952,-2.68348e-07,1.31333e-07,2.49786e-11);
  fx[3] = new TF1("fx3","pol5",-110,110);
  fx[3]->SetParameters(111.877,0.000537313,-0.00505491,-1.78942e-07,1.31723e-07,1.03548e-11);
  fx[4] = new TF1("fx4","pol5",-110,110);
  fx[4]->SetParameters(114.58,0.000690939,-0.00524847,-1.57119e-07,1.37843e-07,8.29639e-12);
  fx[5] = new TF1("fx5","pol5",-110,110);
  fx[5]->SetParameters(114.554,0.000441709,-0.00522029,-1.74011e-07,1.3501e-07,1.35947e-11);
  fx[6] = new TF1("fx6","pol5",-110,110);
  fx[6]->SetParameters(111.87,0.00193426,-0.00508288,-9.31728e-07,1.34992e-07,7.4776e-11);
  fx[7] = new TF1("fx7","pol5",-110,110);
  fx[7]->SetParameters(106.323,-0.000872375,-0.00475047,3.83112e-07,1.31354e-07,-2.65185e-11);
  fx[8] = new TF1("fx8","pol5",-110,110);
  fx[8]->SetParameters(98.086,0.00146555,-0.00406202,-6.39966e-07,1.06237e-07,5.28302e-11);
  fx[9] = new TF1("fx9","pol5",-110,110);
  fx[9]->SetParameters(87.7388,0.000490601,-0.00329836,-9.48737e-08,8.14878e-08,4.78624e-12);

  ffga =new TF1 ("ffga","gaus");
  fitfuncp= new TF1("fitfuncp","pol4");
  finalfuncp= new TF1("finalfuncp","pol5");
  finalfuncpx= new TF1("finalfuncpx","pol4");
  for (int i=0;i<10;i++)
    {
      sprintf(nam[i],"chax_%d",i);
      sprintf(nam1[i],"chatta_%d",i);
      sprintf(namt[i],"chatheta_%d",i);
      hx[i]=(TH2D*)f1->Get(nam[i]);//new TH2D(nam[i],"",200,-100,100,1500,0,1500);
       hteta[i]=(TH2D*)f1->Get(nam1[i]);
	he[i]=new TH2D(namt[i],";#theta_{p} [deg];E_{d} [MeV]",70,10,45,2400,0,1200);
    }
  ifstream int1;
    int1.open(outf1);
  if(int1)
    {
      fprintf(stdout,"file %s is open.\n", outf1);
    }
  else if(!int1)
    {
      fprintf(stdout,"can not open %s.\n", outf1);
    }
    do { ll++;
      int1 >> S11[ll] >> SYY[ll] >> Stt[ll] >> S22[ll];
      if (Stt[ll]>15 && Stt[ll]<37)
	{llg++;
	  S1[llg]=S11[ll];
	  SY[llg]=SYY[ll];
	  St[llg]=Stt[ll];
	  S2[llg]=S22[ll];
	}
    }while(!int1.eof());
    int1.close();
    cnl=llg;
    cout << "ll= " << ll << '\t' << llg << endl;
  /* ofstream out1;
    out1.open(outf1);
  if(out1)
    {
      fprintf(stdout,"file %s is open.\n", outf1);
    }
  else if(!out1)
    {
      fprintf(stdout,"can not open %s.\n", outf1);
    }
*/
    test = new TH1D("test","",1900,0,1900);
    /**
		    if (forward_E[i][3]==1 || forward_E[i][6]==1){X=55.8389+7.79965*tdc1m; Y=14.25;}//{tdc1m=tdc1m-5;        X=(8.0011*tdc1m-.2404)+95.5;}
		    else if (forward_E[i][3]==2 || forward_E[i][6]==2){X=5+77.5124+7.48958*tdc1m; Y=34.5;}//{tdc1m=tdc1m-3;   X=(7.633*tdc1m-2.793)+95.5;}
		    else if (forward_E[i][3]==3 || forward_E[i][6]==3){X=5+105.731+7.31080*tdc1m; Y=53;}//{tdc1m=tdc1m+1.3; X=(7.314*tdc1m+2.2344)+95.5;}
		    else if (forward_E[i][3]==4 || forward_E[i][6]==4){X=4+99.33+7.10399*tdc1m; Y=70.5;}//{tdc1m=tdc1m+1;   X=(7.1271*tdc1m-2.5108)+95.5;}
		    else if (forward_E[i][3]==5 || forward_E[i][6]==5){X=-23+98.7483+7.1189*tdc1m; Y=87;}//{tdc1m=tdc1m+3;   X=(7.129*tdc1m+0.1355)+95.5;}
		    else if (forward_E[i][3]==6 || forward_E[i][6]==6){X=4+102.296+7.07982*tdc1m; Y=103.75;}//{tdc1m=tdc1m+1;   X=(7.1859*tdc1m+1.0821)+95.5;}
		    else if (forward_E[i][3]==7 || forward_E[i][6]==7){X=5+93.7223+6.994568*tdc1m; Y=120.75;}//{tdc1m=tdc1m;     X=(7.1424*tdc1m-1.3369)+95.5;}
		    else if (forward_E[i][3]==8 || forward_E[i][6]==8){X=5+107.136+7.188989*tdc1m; Y=138.5;}//{tdc1m=tdc1m+2;   X=(7.2498*tdc1m-1.2799)+95.5;}
		    else if (forward_E[i][3]==9 || forward_E[i][6]==9){X=107.76+7.58622*tdc1m; Y=156.75;}//{tdc1m=tdc1m+1.5; X=(7.5847*tdc1m+3.1261)+95.5;}
		    else if (forward_E[i][3]==10 || forward_E[i][6]==10){X=5+107.035+7.75176*tdc1m; Y=177.25;}//{tdc1m=tdc1m+2; X=(7.9518*tdc1m-.9207)+95.5;}
     **/
    for (int i=0;i<10;i++)
      {
	sprintf(namgP[i],"gr_gainP_%d",i);
	//gainP[i][j] = new TGraphErrors();
	gainP[i] = new TGraph();
	gainP[i]->SetName(namgP[i]);
	
	sprintf(nam2[i],"htes_%d",i);
	htes[i]=new TH2D(nam2[i],";#X_{p} [.5*mm];E_{d} [Chan]",160,-80,80,1900,0,1900);
	
      }
    int lg2=0;
    for (int i=0;i<10;i++)//lg1=0;Ref=0,0;   sss=150;
      {lg2=0;
	for (int ss=0;ss<160;ss=ss+4)
	  {//lg++;//120//previous <120
	    hx[i]->ProjectionY("test",hx[i]->GetXaxis()->FindBin(-80+ss),hx[i]->GetXaxis()->FindBin(-76+ss));//4+2*ss,8+2*ss);
	    bm=test->GetMaximumBin();
	    BC=test->GetBinContent(bm);
	     if (BC>20)
	      {  //<<--for BC
		test->Fit(ffga,"Q","",bm-120,bm+120);
		// bg=ffga->GetParameter(0);
		bm=Ref=ffga->GetParameter(1);
		//bn=ffga->GetParameter(2);
		htes[i]->Fill(-78+ss,.1*Ref);//fx[i]->Eval(-78+ss));
		//cc->cd();
		//test->Draw("cont0");
		//cc->Update();
		//	ps->NewPage();

		//	cc->cd();
		//test->Draw("cont0");
		//hx[i]->Draw("colz");
		//htes[i]->SetMarkerStyle(7);
		//htes[i]->Draw("samep");
		//cc->Update();

		if (fx[i]->Eval(-78+ss)<=0) cout <<"some thing is wrong"<<endl;//return -1;
		else if(fx[i]->Eval(-78+ss)>0)
		  {
		    if (i==1)
		      {
			//			if (ss<152)
			  {
			    gainP[i]->SetPoint(lg2,-78+ss,Ref/fx[i]->Eval(-78+ss));
			    lg2++;
			  }
		      }
		    else
		      {
			gainP[i]->SetPoint(lg2,-78+ss,Ref/fx[i]->Eval(-78+ss));
			lg2++;
		      }
		  }
	      } else continue;
	  }//for ss

      }
    for (int i=0;i<10;i++)
      {
      gainP[i]->Fit(fitfuncp,"Q","",-90,90);
      parr0[i]=fitfuncp->GetParameter(0);
      parr1[i]=fitfuncp->GetParameter(1);
      parr2[i]=fitfuncp->GetParameter(2);
      parr3[i]=fitfuncp->GetParameter(3);
      parr4[i]=fitfuncp->GetParameter(4);
      parr5[i]=fitfuncp->GetParameter(5);
      cc->cd();
      //test->Draw("cont0");
      hx[i]->Draw("colz");
      htes[i]->SetMarkerStyle(7);
      htes[i]->Draw("samep");
      cc->Update();
      
	cc->cd();
	//	test->Draw("cont0");
	//		hx[i]->Draw("colz");
	//htes[i]->SetMarkerStyle(7);
	//htes[i]->Draw("samep");
	gainP[i]->SetMarkerStyle(7);
	gainP[i]->Draw("ap");
	cc->Update();
	//ps->NewPage();
      }

     for (int i=0;i<10;i++)   cout <<  parr0[i] << '\t' <<  parr1[i] << '\t' <<  parr2[i] << '\t' <<  parr3[i] << '\t' <<  parr4[i] << '\t' <<  parr5[i] << endl;
//   In a ROOT session, you can do:
//      Root > .L DPcalib.C
//      Root > DPcalib t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries =10;// fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      printf("\r<I> Progress: %.0f%%",100*(float) jentry/((float) nentries));
  for (int i=0;i<10;i++)
    {
      if (b3_WLdet1==i+1 && abs(abs(b3_MWPCphi1-b3_MWPCphi2)-180)<1 && sqrt(b3_WLE1*b3_WRE1)>400)
	{
	  EFW0 = FITFUX(b3_WLdet1,b3_MWPCX1,b3_WLE1,b3_WRE1);
	  he[i]->Fill(b3_MWPCtheta1,EFW0);
	}
    }
   }
   
   
   f->cd();
   for (int i=0;i<10;i++)
     {
       hx[i]->Write();
       hteta[i]->Write();
       htes[i]->Write();
       he[i]->Write();
       gainP[i]->Write();
     }
   f->Close();
}
double FITFU(double detN, double thta,double adcL, double adcR)
{
  if (detN==1) finalfuncp->SetParameters(parr0[0],parr1[0],parr2[0],parr3[0],parr4[0],parr5[0]);
  if (detN==2) finalfuncp->SetParameters(parr0[1],parr1[1],parr2[1],parr3[1],parr4[1],parr5[1]);
  if (detN==3) finalfuncp->SetParameters(parr0[2],parr1[2],parr2[2],parr3[2],parr4[2],parr5[2]);
  if (detN==4) finalfuncp->SetParameters(parr0[3],parr1[3],parr2[3],parr3[3],parr4[3],parr5[3]);
  if (detN==5) finalfuncp->SetParameters(parr0[4],parr1[4],parr2[4],parr3[4],parr4[4],parr5[4]);
  if (detN==6) finalfuncp->SetParameters(parr0[5],parr1[5],parr2[5],parr3[5],parr4[5],parr5[5]);
  if (detN==7) finalfuncp->SetParameters(parr0[6],parr1[6],parr2[6],parr3[6],parr4[6],parr5[6]);
  if (detN==8) finalfuncp->SetParameters(parr0[7],parr1[7],parr2[7],parr3[7],parr4[7],parr5[7]);
  if (detN==9) finalfuncp->SetParameters(parr0[8],parr1[8],parr2[8],parr3[8],parr4[8],parr5[8]);
  if (detN==10) finalfuncp->SetParameters(parr0[9],parr1[9],parr2[9],parr3[9],parr4[9],parr5[9]);
  return sqrt(adcL*adcR)/finalfuncp->Eval(thta);
}


double FITFUX(double detN, double X,double adcL, double adcR)
{
  if (detN==1) finalfuncpx->SetParameters(11.6573,-0.00771134,-0.000123392,4.4259e-07,4.76729e-09);
  if (detN==2) finalfuncpx->SetParameters(10.4179,-0.00166806,-0.000142643,3.95234e-07,1.19599e-08);
  if (detN==3) finalfuncpx->SetParameters(11.4016,-0.00247665,-8.70318e-05,4.94253e-07,3.99461e-09);
  if (detN==4) finalfuncpx->SetParameters(11.2108,-0.000209536,-9.19942e-05,7.01183e-08,3.38176e-09);
  if (detN==5) finalfuncpx->SetParameters(6.14756,-0.000808484,-0.000131485,1.71999e-08,5.74505e-09);
  if (detN==6) finalfuncpx->SetParameters(5.37911,0.000490492,-6.62438e-05,-7.06355e-08,-5.38664e-10);
  if (detN==7) finalfuncpx->SetParameters(8.94322,-0.00137846,-9.81242e-06,-3.69878e-08,-3.22413e-09);
  if (detN==8) finalfuncpx->SetParameters(8.53172,0.000209272,-5.42106e-05,-1.54237e-07,2.31902e-09);
  if (detN==9) finalfuncpx->SetParameters(8.9057,0.000959606,-0.000107955,-1.86765e-08,6.96538e-09);
  if (detN==10) finalfuncpx->SetParameters(10.9747,-0.00123946,-0.000108328,1.69502e-08,4.25528e-09);
  return sqrt(adcL*adcR)/finalfuncpx->Eval(X);
}
