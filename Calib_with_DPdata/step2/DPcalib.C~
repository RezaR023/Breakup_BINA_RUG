#define DPcalib_cxx
#include "DPcalib.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <TF1.h>
TH2D *hx[10];
char nam[10][350];
#define outf1 "outf11.dat"
TFile *f1=new TFile("../vvbreakDP.root");
int cnl=0,ll=0,llg=0;
double S1[50000],SYY[100000],SY[50000],S2[50000],S11[100000],S22[100000],Stt[100000],St[50000];
TF1 *ftta;
TF1 *fx[10];
void DPcalib::Loop()
{
  using namespace std;
  TFile *f = new TFile("vbreakDPn.root","recreate");
  ftta = new TF1("ftta","pol5",0,90);
  ftta->SetParameters(115.901,0.0280072,-0.0396593,5.70385e-05,4.48284e-06,-2.25287e-08);

  fx[0] = new TF1("fx0","pol5",-110,110);
  fx[0]->SetParameters(87.9084,0.00141299,-0.00329838,-4.86274e-07,8.07931e-08,3.95097e-11);
  fx[1] = new TF1("fx1","pol5",-110,110);
  fx[1]->SetParameters(98.217,0.00132721,-0.00405062,-4.88131e-07,1.03078e-07,3.88546e-11);
  fx[2] = new TF1("fx2","pol5",-110,110);
  fx[2]->SetParameters(106.549,0.000512904,-0.00476952,-2.68348e-07,1.31333e-07,2.49786e-11);
  fx[3] = new TF1("fx3","pol5",-110,110);
  fx[3]->SetParameters(111.877,0.000537313,-0.00505491,-1.78942e-07,1.31723e-07,1.03548e-11);
  fx[4] = new TF1("fx4","pol5",-110,110);
  fx[4]->SetParameters(114.58,0.000690939,-0.00524847,-1.57119e-07,1.37843e-07,8.29639e-12);
  fx[5] = new TF1("fx5","pol5",-110,110);
  fx[5]->SetParameters(114.554,0.000441709,-0.00522029,-1.74011e-07,1.3501e-07,1.35947e-11);
  fx[6] = new TF1("fx6","pol5",-110,110);
  fx[6]->SetParameters(111.87,0.00193426,-0.00508288,-9.31728e-07,1.34992e-07,7.4776e-11);
  fx[7] = new TF1("fx7","pol5",-110,110);
  fx[7]->SetParameters(106.323,-0.000872375,-0.00475047,3.83112e-07,1.31354e-07,-2.65185e-11);
  fx[8] = new TF1("fx8","pol5",-110,110);
  fx[8]->SetParameters(98.086,0.00146555,-0.00406202,-6.39966e-07,1.06237e-07,5.28302e-11);
  fx[9] = new TF1("fx9","pol5",-110,110);
  fx[9]->SetParameters(87.7388,0.000490601,-0.00329836,-9.48737e-08,8.14878e-08,4.78624e-12);

  for (int i=0;i<10;i++)
    {
      sprintf(nam[i],"chax_%d",i);
      hx[i]=(TH2D*)f1->Get(nam[i]);//new TH2D(nam[i],"",200,-100,100,1500,0,1500);

    }
  ifstream int1;
    int1.open(outf1);
  if(int1)
    {
      fprintf(stdout,"file %s is open.\n", outf1);
    }
  else if(!int1)
    {
      fprintf(stdout,"can not open %s.\n", outf1);
    }
    do { ll++;
      int1 >> S11[ll] >> SYY[ll] >> Stt[ll] >> S22[ll];
      if (Stt[ll]>15 && Stt[ll]<37)
	{llg++;
	  S1[llg]=S11[ll];
	  SY[llg]=SYY[ll];
	  St[llg]=Stt[ll];
	  S2[llg]=S22[ll];
	}
    }while(!int1.eof());
    int1.close();
    cnl=llg;
    cout << "ll= " << ll << '\t' << llg << endl;
  /* ofstream out1;
    out1.open(outf1);
  if(out1)
    {
      fprintf(stdout,"file %s is open.\n", outf1);
    }
  else if(!out1)
    {
      fprintf(stdout,"can not open %s.\n", outf1);
    }
*/
    /**
		    if (forward_E[i][3]==1 || forward_E[i][6]==1){X=55.8389+7.79965*tdc1m; Y=14.25;}//{tdc1m=tdc1m-5;        X=(8.0011*tdc1m-.2404)+95.5;}
		    else if (forward_E[i][3]==2 || forward_E[i][6]==2){X=5+77.5124+7.48958*tdc1m; Y=34.5;}//{tdc1m=tdc1m-3;   X=(7.633*tdc1m-2.793)+95.5;}
		    else if (forward_E[i][3]==3 || forward_E[i][6]==3){X=5+105.731+7.31080*tdc1m; Y=53;}//{tdc1m=tdc1m+1.3; X=(7.314*tdc1m+2.2344)+95.5;}
		    else if (forward_E[i][3]==4 || forward_E[i][6]==4){X=4+99.33+7.10399*tdc1m; Y=70.5;}//{tdc1m=tdc1m+1;   X=(7.1271*tdc1m-2.5108)+95.5;}
		    else if (forward_E[i][3]==5 || forward_E[i][6]==5){X=-23+98.7483+7.1189*tdc1m; Y=87;}//{tdc1m=tdc1m+3;   X=(7.129*tdc1m+0.1355)+95.5;}
		    else if (forward_E[i][3]==6 || forward_E[i][6]==6){X=4+102.296+7.07982*tdc1m; Y=103.75;}//{tdc1m=tdc1m+1;   X=(7.1859*tdc1m+1.0821)+95.5;}
		    else if (forward_E[i][3]==7 || forward_E[i][6]==7){X=5+93.7223+6.994568*tdc1m; Y=120.75;}//{tdc1m=tdc1m;     X=(7.1424*tdc1m-1.3369)+95.5;}
		    else if (forward_E[i][3]==8 || forward_E[i][6]==8){X=5+107.136+7.188989*tdc1m; Y=138.5;}//{tdc1m=tdc1m+2;   X=(7.2498*tdc1m-1.2799)+95.5;}
		    else if (forward_E[i][3]==9 || forward_E[i][6]==9){X=107.76+7.58622*tdc1m; Y=156.75;}//{tdc1m=tdc1m+1.5; X=(7.5847*tdc1m+3.1261)+95.5;}
		    else if (forward_E[i][3]==10 || forward_E[i][6]==10){X=5+107.035+7.75176*tdc1m; Y=177.25;}//{tdc1m=tdc1m+2; X=(7.9518*tdc1m-.9207)+95.5;}
     **/

//   In a ROOT session, you can do:
//      Root > .L DPcalib.C
//      Root > DPcalib t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = 10;//fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      // if (Cut(ientry) < 0) continue;
      printf("\r<I> Progress: %.0f%%",100*(float) jentry/((float) nentries));
  for (int i=0;i<10;i++)
    {
      if (b3_WLdet1==i+1 && (b3_WLdet1==1 || b3_WLdet1==4))
	{
	  if (abs(abs(b3_MWPCphi1-b3_MWPCphi2)-180)<2 && (b3_MWPCX1-95.5)>-80 && (b3_MWPCX1-95.5)<80 && sqrt(b3_WLE1*b3_WRE1)>500)
	    {
	      //	hx[i]->Fill((b3_MWPCX1-95.5),sqrt(b3_WLE1*b3_WRE1));
	    }
	}
      else if (b3_WLdet1==i+1 && (b3_WLdet1==5 || b3_WLdet1==6))
	{
	  if (abs(abs(b3_MWPCphi1-b3_MWPCphi2)-180)<2 && (b3_MWPCX1-95.5)>-80 && (b3_MWPCX1-95.5)<80 && sqrt(b3_WLE1*b3_WRE1)>400)
	    {
	      //hx[i]->Fill((b3_MWPCX1-95.5),sqrt(b3_WLE1*b3_WRE1));
	    }
	}
      else if (b3_WLdet1==i+1 && (b3_WLdet1==2 || b3_WLdet1==3 || b3_WLdet1==7 || b3_WLdet1==8 || b3_WLdet1==9 || b3_WLdet1==10))
	{
	  if (abs(abs(b3_MWPCphi1-b3_MWPCphi2)-180)<2 && (b3_MWPCX1-95.5)>-80 && (b3_MWPCX1-95.5)<80 && sqrt(b3_WLE1*b3_WRE1)>550)
	    {
	      if (b3_WLdet1==3 || b3_WLdet1==8)
		{
		  if (abs(b3_MWPCX1-95.5)>30)
		    {
		      //      hx[i]->Fill((b3_MWPCX1-95.5),sqrt(b3_WLE1*b3_WRE1));
		    }
		}
	      else if (b3_WLdet1==2 || b3_WLdet1==7 || b3_WLdet1==9 || b3_WLdet1==10)
		{
		  //hx[i]->Fill((b3_MWPCX1-95.5),sqrt(b3_WLE1*b3_WRE1));
		}
	    }
	}
    }
   }


   f->cd();
  for (int i=0;i<10;i++)
    {
      hx[i]->Write();
    }
  f->Close();
}
